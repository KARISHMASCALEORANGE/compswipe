{"ast":null,"code":"\n// import React, { useEffect, useState } from 'react';\n// import { ChevronDown, ChevronUp, Plus, Minus, ShoppingCart, X } from 'lucide-react';\n// import { useLocation } from 'react-router-dom';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// // import CsvDataDisplay from './data';\n\n// // ToggleSwitch Component\n// const ToggleSwitch = ({ isOn, onToggle }) => (\n//   <div\n//     className={`w-8 h-4 flex items-center rounded-full p-1 cursor-pointer ${isOn ? 'bg-green-500' : 'bg-gray-300'}`}\n//     onClick={onToggle}\n//   >\n//     <div\n//       className={`bg-white w-3 h-3 rounded-full shadow-md transform duration-300 ease-in-out ${isOn ? 'translate-x-4' : 'translate-x-0'}`}\n//     ></div>\n//   </div>\n// );\n\n// // MenuItem Component\n// const MenuItem = ({ item, checked, unit, onToggleUnit, onCheck, mainToggleOn }) => {\n//   const shouldDisplayToggle = item.isDual === 'TRUE';\n\n//   return (\n//     <div className=\"flex items-center justify-between p-2 border-b border-gray-200\">\n//       <div className=\"flex items-center flex-grow\">\n//         <img src={item.Image} alt={item['ProductName']} className=\"w-16 h-16 object-cover rounded mr-4\" />\n//         <div className=\"flex items-center justify-between\">\n//           <h3 className=\"font-semibold text-gray-800\">{item['ProductName']}</h3>\n//           <input\n//             type=\"checkbox\"\n//             checked={checked}\n//             onChange={onCheck}\n//             className=\"ml-2\"\n//           />\n//         </div>\n//       </div>\n//       <div className={`flex items-center ${mainToggleOn ? 'justify-end' : 'justify-start'}`}>\n//         {/* Display the corresponding unit text above the toggle */}\n//         <div className=\"text-sm text-gray-600 mr-2\">\n//           {unit}\n//         </div>\n//         {shouldDisplayToggle && (\n//           <div className=\"flex items-center\">\n//             <ToggleSwitch\n//               isOn={unit === item['Units']}\n//               onToggle={onToggleUnit}\n//             />\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// // MenuCategory Component\n// const MenuCategory = ({ category_name, items, checkedItems, units, onToggleUnit, onCheck, mainToggleOn }) => {\n//   const [isOpen, setIsOpen] = useState(false);\n\n//   return (\n//     <div className=\"mb-4 bg-white rounded-lg shadow\">\n//       <button\n//         className=\"w-full flex items-center justify-between p-4 text-left\"\n//         onClick={() => setIsOpen(!isOpen)}\n//       >\n//         <span className=\"text-lg font-semibold text-gray-800\">{category_name}</span>\n//         {isOpen ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\n//       </button>\n//       {isOpen && (\n//         <div>\n//           {items.map(item => (\n//             <MenuItem\n//               key={item['productId']}\n//               item={item}\n//               checked={checkedItems[item['productId']] || false}\n//               unit={units[item['productId']] || item['Units']}\n//               onToggleUnit={() => onToggleUnit(item['productId'])}\n//               onCheck={() => onCheck(item['productId'])}\n//               mainToggleOn={mainToggleOn}\n//             />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// // CartSidebar Component\n// const CartSidebar = ({ isOpen, onClose, cartItems, numberOfPlates, onUpdateQuantity, onToggleUnit }) => {\n//   // const navigate = useNavigate();\n//   const categoriesWithoutToggle = ['BREAKFAST ITEMS', 'WELCOME DRINKS'];\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const [redirectUrl, setRedirectUrl] = useState('');\n\n//   // Handle input value change\n// // Allow free input without restrictions\n// const handleInputChange = (itemId, value) => {\n//   // Allow empty string input but don't update the quantity just yet\n//   const newQuantity = value === '' ? '' : Number(value); \n//   onUpdateQuantity(itemId, newQuantity); // Update the quantity in state\n// };\n\n// // Reset to minimum if the input is invalid or empty on blur\n// const handleBlur = (itemId, quantity, perPlaMinUnitste) => {\n//   // Reset to the minimum allowed quantity if the input is empty or less than the min\n//   const newQuantity = quantity < minUnitsPerPlate ? minUnitsPerPlate : quantity;\n//   onUpdateQuantity(itemId, newQuantity); // Update the quantity to the correct value\n// };\n\n//   // Calculate the total item cost\n//   function calculateTotalItemCost(item, numberOfPlates, selectedUnit, enteredValue) {\n//     let totalItemCost = 0;\n//     // console.log(\"hello\");\n//     // console.log(\"Function called\");\n//     // console.log(\"item:\", item);\n//     // console.log(\"numberOfPlates:\", numberOfPlates);\n//     // console.log(\"selectedUnit:\", selectedUnit);\n//     // console.log(\"enteredValue:\", enteredValue);\n\n//     if (selectedUnit === item['Units']) {\n//       const pricePerUnit = item['PriceperUnit'];\n//       console.log(\"hi\", pricePerUnit);\n//       totalItemCost = numberOfPlates * pricePerUnit * item.quantity;\n//       console.log(\"idly\", totalItemCost);  \n//   } \n//   if (item['Price_Category'] === 'kg' || item['Price_Category'] === 'lt') {\n//     totalItemCost = enteredValue * item['price_per_Units'];\n//     console.log(\"kg\",totalItemCost);\n//   }\n\n//     else if (selectedUnit === item['unit__2']) {\n//       const costPerSmallerUnit = item['PriceperUnits2'] / item['MinUnits2perPlate'];\n//       totalItemCost = costPerSmallerUnit * enteredValue * numberOfPlates;\n\n//     } else  if (selectedUnit === item['Units']) {\n//       const pricePerUnit = item['PriceperUnit'];\n//       console.log(\"hi\", pricePerUnit);\n//       totalItemCost = numberOfPlates * pricePerUnit * item.quantity;\n//       console.log(\"idly\", totalItemCost);  \n//   } \n\n//     return totalItemCost.toFixed(2);\n//   }\n\n//   // Calculate total amount\n//   const totalAmount = cartItems.reduce((sum, item) => {\n//     const selectedUnit = item.unit; // Use the unit from the cart item\n//     const totalItemCost = calculateTotalItemCost(item, numberOfPlates, selectedUnit, item.quantity);\n//     return sum + parseFloat(totalItemCost);\n//   }, 0).toFixed(2);\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     setError('');\n//     console.log(\"paynowpage\");\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/pay', {\n//         amount: totalAmount\n//       });\n\n//       if (response.data && response.data.redirectUrl) {\n//         setRedirectUrl(response.data.redirectUrl);\n//         window.location.href = response.data.redirectUrl;\n//       } else {\n//         setError('Unexpected response format.');\n//       }\n//     } catch (err) {\n//       setError(`err.response ? Error: ${err.response.data.message || 'An error occurred. Please try again.'} : 'Network error or no response from the server.'`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className={`fixed right-0 top-0 h-full w-80 bg-white shadow-lg transform transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>\n//       <div className=\"p-4 flex flex-col h-full\">\n//         <div className=\"flex justify-between items-center mb-4\">\n//           <h2 className=\"text-xl font-bold text-gray-800\">Cart</h2>\n//           <button onClick={onClose} className=\"text-gray-600 hover:text-gray-800\">\n//             <X size={24} />\n//           </button>\n//         </div>\n\n//         <div className=\"overflow-y-auto flex-grow\">\n//           {cartItems.length === 0 ? (\n//             <div className=\"flex items-center justify-center h-full text-gray-600 text-lg\">\n//               Your cart is empty. Fill the cart to proceed.\n//             </div>\n//           ) : (\n//             cartItems.map(item => {\n//               const minUnitsPerPlate = item['MinUnits2perPlate'] || 1;\n//               const displayPricePerUnit = item.unit === item['Units'] \n//                ? item['PriceperUnit'] \n//                : (item.unit === item['Units2'] \n//                ? item['PriceperUnits2'] / item['MinUnits2perPlate'] \n//                : item['PriceperUnits2']);\n//               const totalItemCost = calculateTotalItemCost(item, numberOfPlates, item.unit, item.quantity);\n//               const isPcs = item['Units'] === 'pcs';\n//               const isKgOrLt = item['Price_Category'] === 'kg' || item['Price_Category'] === 'lt';\n//               const isSmallerUnit = item['Units2'] === 'gms' || item['Units2'] === 'ml';\n\n//               console.log('isSmallerUnit:', isSmallerUnit);\n\n//               return (\n//                 <div key={item['productId']} className=\"flex flex-col mb-4 border-b border-gray-200 pb-4\">\n//                   <div className=\"flex flex-col items-center mb-2\">\n//                     <h3 className=\"font-semibold text-gray-800 mb-1\">{item['productName']}</h3>\n//                     <img src={item.Image} alt={item['ProductName']} className=\"w-24 h-24 object-cover rounded mb-2\" />\n//                     <p className=\"text-sm text-gray-600 mb-2 flex flex-col items-center\">\n//                       <span className=\"font-medium text-gray-800\">Item Cost:</span>\n//                       <span className=\"text-gray-700 mt-1\">\n//                         {isPcs\n//                          ? ` ${item.quantity}* ${item[\"PriceperUnit\"]} * ${numberOfPlates} = `\n//                         :isKgOrLt\n//                           ? `${displayPricePerUnit} * ${item.quantity} = `\n//                           : isSmallerUnit\n//                             ? `${displayPricePerUnit} * ${item.quantity} * ${numberOfPlates} = `\n//                             : `${displayPricePerUnit} * ${item.quantity} = `\n//                         }\n//                         <span className=\"text-gray-800 font-semibold\">${totalItemCost}</span>\n//                       </span>\n//                     </p>\n//                   </div>\n\n//                   {!categoriesWithoutToggle.includes(item.Category_Name) && item.isDual === 'TRUE' && (\n//                     <div className=\"flex items-center mb-2\">\n//                       <ToggleSwitch \n//                         isOn={item.unit === item['Units']}\n//                         onToggle={() => onToggleUnit(item['productId'])}\n//                       />\n//                       <span className=\"text-sm text-gray-600\">{item.unit}</span>\n//                     </div>\n//                   )}\n\n// <div className=\"flex items-center justify-center mb-2\">\n//   <button \n//     onClick={() => onUpdateQuantity(item['productId'], Math.max(item.quantity - 1, 1))} \n//     className=\"p-1 bg-green-500 text-white rounded-l\"\n//   >\n//     <Minus size={14} />\n//   </button>\n\n//   <input \n//     type=\"number\" \n//     value={item.quantity} \n//     onChange={(e) => handleInputChange(item['productId'], e.target.value, minUnitsPerPlate)} \n//     onBlur={() => handleBlur(item['productId'], item.quantity, minUnitsPerPlate)} \n//     className=\"w-12 text-center px-2 py-1 border\"\n//     min=\"0\"\n//   />\n\n//   <button \n//     onClick={() => onUpdateQuantity(item['productId'], item.quantity + 1)} \n//     className=\"p-1 bg-green-500 text-white rounded-r\"\n//   >\n//     <Plus size={14} />\n//   </button>\n// </div>\n\n//                 </div>\n//               );\n//             })\n//           )}\n//         </div>\n\n//         {cartItems.length > 0 && (\n//           <div className=\"flex flex-col justify-end mt-auto\">\n//             <div className=\"mt-4 text-xl font-bold text-gray-800 mb-2\">\n//               Total Amount: ${totalAmount}\n//             </div>\n\n//            <button onClick={handleSubmit} className=\"mt-4 py-2 px-4 bg-yellow-500 text-gray-800 font-bold rounded\">\n//               Pay Now\n//             </button>\n\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// // Menu Component\n// const Menu = () => {\n//   const [menuData, setMenuData] = useState([]);\n//   const [checkedItems, setCheckedItems] = useState({});\n//   const [quantities, setQuantities] = useState({});\n//   const [units, setUnits] = useState({});\n//   const [isCartOpen, setIsCartOpen] = useState(false);\n//   const [mainToggleOn, setMainToggleOn] = useState(false); // Main toggle state\n//   const location = useLocation();\n//   const numberOfPlates = location.state?.numberOfPlates || 1; // Retrieve the number of plates from location state\n//   // const navigate = useNavigate(); \n\n//   useEffect(() => {\n//     fetch('/data.json')\n//       .then(response => response.json())\n//       .then(data => {\n//         const transformedData = data.reduce((acc, item) => {\n//           const category = item['category_name'];\n//           if (!acc[category]) {\n//             acc[category] = { category, items: [] };\n//           }\n//           acc[category].items.push(item);\n//           return acc;\n//         }, {});\n\n//         setMenuData(Object.values(transformedData));\n\n//         const initialUnits = {};\n//         data.forEach(item => {\n//           initialUnits[item['productId']] = item['Units'];\n//         });\n//         setUnits(initialUnits);\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n//   }, []);\n\n//   // Update item toggles based on the main toggle state\n//   useEffect(() => {\n//     setUnits(prevUnits => {\n//       const updatedUnits = {};\n//       menuData.flatMap(category => category.items).forEach(item => {\n//         if (item.isDual === 'TRUE') {\n//           updatedUnits[item['productId']] = mainToggleOn ?  item['Units']:item['Units2'];\n//         }\n//       });\n//       return updatedUnits;\n//     });\n//   }, [mainToggleOn, menuData]);\n\n//   const updateQuantity = (itemId, newQuantity) => {\n//     setQuantities(prev => ({ ...prev, [itemId]: newQuantity }));\n//   };\n\n//   const toggleUnit = (itemId) => {\n//     const item = menuData\n//       .flatMap(category => category.items)\n//       .find(item => item['productId'] === itemId);\n\n//     if (item && item.isDual === 'TRUE') {\n//       setUnits(prev => ({\n//         ...prev,\n//         [itemId]: prev[itemId] === item['Units'] ? item['Units2'] : item['Units']\n//       }));\n//     }\n//   };\n\n//   const handleCheck = (itemId) => {\n//     const newCheckedItems = { ...checkedItems, [itemId]: !checkedItems[itemId] };\n//     setCheckedItems(newCheckedItems);\n//     if (!checkedItems[itemId]) {\n//       setQuantities(prev => ({ ...prev, [itemId]: 1 }));\n//     } else {\n//       setQuantities(prev => ({ ...prev, [itemId]: 0 }));\n//     }\n//   };\n\n//   const totalQuantity = Object.values(quantities).reduce((sum, q) => sum + q, 0);\n\n//   const cartItems = menuData.flatMap(category =>\n//     category.items\n//       .filter(item => quantities[item['productId']] > 0)\n//       .map(item => ({\n//         ...item,\n//         quantity: quantities[item['productId']],\n//         unit: units[item['productId']] || item['Units'], \n//         price: units[item['productId']] === item['Units'] \n//                 ? item['PriceperUnit'] \n//                 : item['PriceperUnits2'],\n//         category: category.category\n//       }))\n//   );\n\n//   return (\n//     <div className=\"bg-gradient-to-b from-[#008000]\">\n//       <div className=\"bg-gradient-to-b from-[#008000] to-[#70c656]\">\n//         <div className=\"flex justify-between items-center bg-gradient-to-b from-[#008000] to-[#70c656] py-4 px-6\">\n//           <h1 className=\"text-2xl font-bold text-white\">Menu</h1>\n//           {/* <CsvDataDisplay/> */}\n//           <button\n//             onClick={() => setIsCartOpen(true)}\n//             className=\"relative bg-green-500 text-white p-2 rounded\"\n//           >\n//             <ShoppingCart size={24} />\n//             {totalQuantity > 0 && (\n//               <span className=\"absolute top-0 right-0 bg-red-500 text-white rounded-full px-2 text-xs\">\n//                 {totalQuantity}\n//               </span>\n//             )}\n//           </button>\n//         </div>\n//         {/* Main Toggle Switch */}\n//         <div className=\"flex justify-center py-2\">\n//           <ToggleSwitch\n//             isOn={mainToggleOn}\n//             onToggle={() => setMainToggleOn(prev => !prev)}\n//           />\n//         </div>\n//       </div>\n//       <div className=\"p-6\">\n//         {menuData.map(category => (\n//           <MenuCategory\n//             key={category.category}\n//             category={category.category}\n//             items={category.items}\n//             checkedItems={checkedItems}\n//             units={units}\n//             onToggleUnit={toggleUnit}\n//             onCheck={handleCheck}\n//             mainToggleOn={mainToggleOn} // Pass main toggle state here\n//           />\n//         ))}\n//       </div>\n//       <CartSidebar\n//         isOpen={isCartOpen}\n//         onClose={() => setIsCartOpen(false)}\n//         cartItems={cartItems}\n//         numberOfPlates={numberOfPlates} // Pass numberOfPlates here\n//         onUpdateQuantity={updateQuantity}\n//         onToggleUnit={toggleUnit}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Menu;","map":{"version":3,"names":[],"sources":["C:/Users/Karishma/Desktop/compswipe/compswipe/client/my-app/src/MenuItem.js"],"sourcesContent":["\r\n// import React, { useEffect, useState } from 'react';\r\n// import { ChevronDown, ChevronUp, Plus, Minus, ShoppingCart, X } from 'lucide-react';\r\n// import { useLocation } from 'react-router-dom';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// // import CsvDataDisplay from './data';\r\n\r\n\r\n\r\n// // ToggleSwitch Component\r\n// const ToggleSwitch = ({ isOn, onToggle }) => (\r\n//   <div\r\n//     className={`w-8 h-4 flex items-center rounded-full p-1 cursor-pointer ${isOn ? 'bg-green-500' : 'bg-gray-300'}`}\r\n//     onClick={onToggle}\r\n//   >\r\n//     <div\r\n//       className={`bg-white w-3 h-3 rounded-full shadow-md transform duration-300 ease-in-out ${isOn ? 'translate-x-4' : 'translate-x-0'}`}\r\n//     ></div>\r\n//   </div>\r\n// );\r\n\r\n// // MenuItem Component\r\n// const MenuItem = ({ item, checked, unit, onToggleUnit, onCheck, mainToggleOn }) => {\r\n//   const shouldDisplayToggle = item.isDual === 'TRUE';\r\n\r\n//   return (\r\n//     <div className=\"flex items-center justify-between p-2 border-b border-gray-200\">\r\n//       <div className=\"flex items-center flex-grow\">\r\n//         <img src={item.Image} alt={item['ProductName']} className=\"w-16 h-16 object-cover rounded mr-4\" />\r\n//         <div className=\"flex items-center justify-between\">\r\n//           <h3 className=\"font-semibold text-gray-800\">{item['ProductName']}</h3>\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             checked={checked}\r\n//             onChange={onCheck}\r\n//             className=\"ml-2\"\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//       <div className={`flex items-center ${mainToggleOn ? 'justify-end' : 'justify-start'}`}>\r\n//         {/* Display the corresponding unit text above the toggle */}\r\n//         <div className=\"text-sm text-gray-600 mr-2\">\r\n//           {unit}\r\n//         </div>\r\n//         {shouldDisplayToggle && (\r\n//           <div className=\"flex items-center\">\r\n//             <ToggleSwitch\r\n//               isOn={unit === item['Units']}\r\n//               onToggle={onToggleUnit}\r\n//             />\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // MenuCategory Component\r\n// const MenuCategory = ({ category_name, items, checkedItems, units, onToggleUnit, onCheck, mainToggleOn }) => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   return (\r\n//     <div className=\"mb-4 bg-white rounded-lg shadow\">\r\n//       <button\r\n//         className=\"w-full flex items-center justify-between p-4 text-left\"\r\n//         onClick={() => setIsOpen(!isOpen)}\r\n//       >\r\n//         <span className=\"text-lg font-semibold text-gray-800\">{category_name}</span>\r\n//         {isOpen ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\r\n//       </button>\r\n//       {isOpen && (\r\n//         <div>\r\n//           {items.map(item => (\r\n//             <MenuItem\r\n//               key={item['productId']}\r\n//               item={item}\r\n//               checked={checkedItems[item['productId']] || false}\r\n//               unit={units[item['productId']] || item['Units']}\r\n//               onToggleUnit={() => onToggleUnit(item['productId'])}\r\n//               onCheck={() => onCheck(item['productId'])}\r\n//               mainToggleOn={mainToggleOn}\r\n//             />\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// // CartSidebar Component\r\n// const CartSidebar = ({ isOpen, onClose, cartItems, numberOfPlates, onUpdateQuantity, onToggleUnit }) => {\r\n//   // const navigate = useNavigate();\r\n//   const categoriesWithoutToggle = ['BREAKFAST ITEMS', 'WELCOME DRINKS'];\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState('');\r\n//   const [redirectUrl, setRedirectUrl] = useState('');\r\n\r\n//   // Handle input value change\r\n// // Allow free input without restrictions\r\n// const handleInputChange = (itemId, value) => {\r\n//   // Allow empty string input but don't update the quantity just yet\r\n//   const newQuantity = value === '' ? '' : Number(value); \r\n//   onUpdateQuantity(itemId, newQuantity); // Update the quantity in state\r\n// };\r\n\r\n// // Reset to minimum if the input is invalid or empty on blur\r\n// const handleBlur = (itemId, quantity, perPlaMinUnitste) => {\r\n//   // Reset to the minimum allowed quantity if the input is empty or less than the min\r\n//   const newQuantity = quantity < minUnitsPerPlate ? minUnitsPerPlate : quantity;\r\n//   onUpdateQuantity(itemId, newQuantity); // Update the quantity to the correct value\r\n// };\r\n\r\n\r\n//   // Calculate the total item cost\r\n//   function calculateTotalItemCost(item, numberOfPlates, selectedUnit, enteredValue) {\r\n//     let totalItemCost = 0;\r\n//     // console.log(\"hello\");\r\n//     // console.log(\"Function called\");\r\n//     // console.log(\"item:\", item);\r\n//     // console.log(\"numberOfPlates:\", numberOfPlates);\r\n//     // console.log(\"selectedUnit:\", selectedUnit);\r\n//     // console.log(\"enteredValue:\", enteredValue);\r\n    \r\n//     if (selectedUnit === item['Units']) {\r\n//       const pricePerUnit = item['PriceperUnit'];\r\n//       console.log(\"hi\", pricePerUnit);\r\n//       totalItemCost = numberOfPlates * pricePerUnit * item.quantity;\r\n//       console.log(\"idly\", totalItemCost);  \r\n//   } \r\n//   if (item['Price_Category'] === 'kg' || item['Price_Category'] === 'lt') {\r\n//     totalItemCost = enteredValue * item['price_per_Units'];\r\n//     console.log(\"kg\",totalItemCost);\r\n//   }\r\n\r\n//     else if (selectedUnit === item['unit__2']) {\r\n//       const costPerSmallerUnit = item['PriceperUnits2'] / item['MinUnits2perPlate'];\r\n//       totalItemCost = costPerSmallerUnit * enteredValue * numberOfPlates;\r\n\r\n//     } else  if (selectedUnit === item['Units']) {\r\n//       const pricePerUnit = item['PriceperUnit'];\r\n//       console.log(\"hi\", pricePerUnit);\r\n//       totalItemCost = numberOfPlates * pricePerUnit * item.quantity;\r\n//       console.log(\"idly\", totalItemCost);  \r\n//   } \r\n\r\n//     return totalItemCost.toFixed(2);\r\n//   }\r\n\r\n//   // Calculate total amount\r\n//   const totalAmount = cartItems.reduce((sum, item) => {\r\n//     const selectedUnit = item.unit; // Use the unit from the cart item\r\n//     const totalItemCost = calculateTotalItemCost(item, numberOfPlates, selectedUnit, item.quantity);\r\n//     return sum + parseFloat(totalItemCost);\r\n//   }, 0).toFixed(2);\r\n\r\n//   // Handle form submission\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setLoading(true);\r\n//     setError('');\r\n//     console.log(\"paynowpage\");\r\n\r\n\r\n   \r\n    \r\n//     try {\r\n//       const response = await axios.post('http://localhost:5000/pay', {\r\n//         amount: totalAmount\r\n//       });\r\n      \r\n//       if (response.data && response.data.redirectUrl) {\r\n//         setRedirectUrl(response.data.redirectUrl);\r\n//         window.location.href = response.data.redirectUrl;\r\n//       } else {\r\n//         setError('Unexpected response format.');\r\n//       }\r\n//     } catch (err) {\r\n//       setError(`err.response ? Error: ${err.response.data.message || 'An error occurred. Please try again.'} : 'Network error or no response from the server.'`);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <div className={`fixed right-0 top-0 h-full w-80 bg-white shadow-lg transform transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>\r\n//       <div className=\"p-4 flex flex-col h-full\">\r\n//         <div className=\"flex justify-between items-center mb-4\">\r\n//           <h2 className=\"text-xl font-bold text-gray-800\">Cart</h2>\r\n//           <button onClick={onClose} className=\"text-gray-600 hover:text-gray-800\">\r\n//             <X size={24} />\r\n//           </button>\r\n//         </div>\r\n\r\n//         <div className=\"overflow-y-auto flex-grow\">\r\n//           {cartItems.length === 0 ? (\r\n//             <div className=\"flex items-center justify-center h-full text-gray-600 text-lg\">\r\n//               Your cart is empty. Fill the cart to proceed.\r\n//             </div>\r\n//           ) : (\r\n//             cartItems.map(item => {\r\n//               const minUnitsPerPlate = item['MinUnits2perPlate'] || 1;\r\n//               const displayPricePerUnit = item.unit === item['Units'] \r\n//                ? item['PriceperUnit'] \r\n//                : (item.unit === item['Units2'] \r\n//                ? item['PriceperUnits2'] / item['MinUnits2perPlate'] \r\n//                : item['PriceperUnits2']);\r\n//               const totalItemCost = calculateTotalItemCost(item, numberOfPlates, item.unit, item.quantity);\r\n//               const isPcs = item['Units'] === 'pcs';\r\n//               const isKgOrLt = item['Price_Category'] === 'kg' || item['Price_Category'] === 'lt';\r\n//               const isSmallerUnit = item['Units2'] === 'gms' || item['Units2'] === 'ml';\r\n             \r\n//               console.log('isSmallerUnit:', isSmallerUnit);\r\n\r\n//               return (\r\n//                 <div key={item['productId']} className=\"flex flex-col mb-4 border-b border-gray-200 pb-4\">\r\n//                   <div className=\"flex flex-col items-center mb-2\">\r\n//                     <h3 className=\"font-semibold text-gray-800 mb-1\">{item['productName']}</h3>\r\n//                     <img src={item.Image} alt={item['ProductName']} className=\"w-24 h-24 object-cover rounded mb-2\" />\r\n//                     <p className=\"text-sm text-gray-600 mb-2 flex flex-col items-center\">\r\n//                       <span className=\"font-medium text-gray-800\">Item Cost:</span>\r\n//                       <span className=\"text-gray-700 mt-1\">\r\n//                         {isPcs\r\n//                          ? ` ${item.quantity}* ${item[\"PriceperUnit\"]} * ${numberOfPlates} = `\r\n//                         :isKgOrLt\r\n//                           ? `${displayPricePerUnit} * ${item.quantity} = `\r\n//                           : isSmallerUnit\r\n//                             ? `${displayPricePerUnit} * ${item.quantity} * ${numberOfPlates} = `\r\n//                             : `${displayPricePerUnit} * ${item.quantity} = `\r\n//                         }\r\n//                         <span className=\"text-gray-800 font-semibold\">${totalItemCost}</span>\r\n//                       </span>\r\n//                     </p>\r\n//                   </div>\r\n\r\n//                   {!categoriesWithoutToggle.includes(item.Category_Name) && item.isDual === 'TRUE' && (\r\n//                     <div className=\"flex items-center mb-2\">\r\n//                       <ToggleSwitch \r\n//                         isOn={item.unit === item['Units']}\r\n//                         onToggle={() => onToggleUnit(item['productId'])}\r\n//                       />\r\n//                       <span className=\"text-sm text-gray-600\">{item.unit}</span>\r\n//                     </div>\r\n//                   )}\r\n\r\n// <div className=\"flex items-center justify-center mb-2\">\r\n//   <button \r\n//     onClick={() => onUpdateQuantity(item['productId'], Math.max(item.quantity - 1, 1))} \r\n//     className=\"p-1 bg-green-500 text-white rounded-l\"\r\n//   >\r\n//     <Minus size={14} />\r\n//   </button>\r\n  \r\n//   <input \r\n//     type=\"number\" \r\n//     value={item.quantity} \r\n//     onChange={(e) => handleInputChange(item['productId'], e.target.value, minUnitsPerPlate)} \r\n//     onBlur={() => handleBlur(item['productId'], item.quantity, minUnitsPerPlate)} \r\n//     className=\"w-12 text-center px-2 py-1 border\"\r\n//     min=\"0\"\r\n//   />\r\n  \r\n//   <button \r\n//     onClick={() => onUpdateQuantity(item['productId'], item.quantity + 1)} \r\n//     className=\"p-1 bg-green-500 text-white rounded-r\"\r\n//   >\r\n//     <Plus size={14} />\r\n//   </button>\r\n// </div>\r\n\r\n//                 </div>\r\n//               );\r\n//             })\r\n//           )}\r\n//         </div>\r\n\r\n//         {cartItems.length > 0 && (\r\n//           <div className=\"flex flex-col justify-end mt-auto\">\r\n//             <div className=\"mt-4 text-xl font-bold text-gray-800 mb-2\">\r\n//               Total Amount: ${totalAmount}\r\n//             </div>\r\n\r\n//            <button onClick={handleSubmit} className=\"mt-4 py-2 px-4 bg-yellow-500 text-gray-800 font-bold rounded\">\r\n//               Pay Now\r\n//             </button>\r\n\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// // Menu Component\r\n// const Menu = () => {\r\n//   const [menuData, setMenuData] = useState([]);\r\n//   const [checkedItems, setCheckedItems] = useState({});\r\n//   const [quantities, setQuantities] = useState({});\r\n//   const [units, setUnits] = useState({});\r\n//   const [isCartOpen, setIsCartOpen] = useState(false);\r\n//   const [mainToggleOn, setMainToggleOn] = useState(false); // Main toggle state\r\n//   const location = useLocation();\r\n//   const numberOfPlates = location.state?.numberOfPlates || 1; // Retrieve the number of plates from location state\r\n//   // const navigate = useNavigate(); \r\n  \r\n//   useEffect(() => {\r\n//     fetch('/data.json')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         const transformedData = data.reduce((acc, item) => {\r\n//           const category = item['category_name'];\r\n//           if (!acc[category]) {\r\n//             acc[category] = { category, items: [] };\r\n//           }\r\n//           acc[category].items.push(item);\r\n//           return acc;\r\n//         }, {});\r\n\r\n//         setMenuData(Object.values(transformedData));\r\n\r\n//         const initialUnits = {};\r\n//         data.forEach(item => {\r\n//           initialUnits[item['productId']] = item['Units'];\r\n//         });\r\n//         setUnits(initialUnits);\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n//   }, []);\r\n\r\n//   // Update item toggles based on the main toggle state\r\n//   useEffect(() => {\r\n//     setUnits(prevUnits => {\r\n//       const updatedUnits = {};\r\n//       menuData.flatMap(category => category.items).forEach(item => {\r\n//         if (item.isDual === 'TRUE') {\r\n//           updatedUnits[item['productId']] = mainToggleOn ?  item['Units']:item['Units2'];\r\n//         }\r\n//       });\r\n//       return updatedUnits;\r\n//     });\r\n//   }, [mainToggleOn, menuData]);\r\n\r\n//   const updateQuantity = (itemId, newQuantity) => {\r\n//     setQuantities(prev => ({ ...prev, [itemId]: newQuantity }));\r\n//   };\r\n\r\n//   const toggleUnit = (itemId) => {\r\n//     const item = menuData\r\n//       .flatMap(category => category.items)\r\n//       .find(item => item['productId'] === itemId);\r\n\r\n//     if (item && item.isDual === 'TRUE') {\r\n//       setUnits(prev => ({\r\n//         ...prev,\r\n//         [itemId]: prev[itemId] === item['Units'] ? item['Units2'] : item['Units']\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   const handleCheck = (itemId) => {\r\n//     const newCheckedItems = { ...checkedItems, [itemId]: !checkedItems[itemId] };\r\n//     setCheckedItems(newCheckedItems);\r\n//     if (!checkedItems[itemId]) {\r\n//       setQuantities(prev => ({ ...prev, [itemId]: 1 }));\r\n//     } else {\r\n//       setQuantities(prev => ({ ...prev, [itemId]: 0 }));\r\n//     }\r\n//   };\r\n\r\n//   const totalQuantity = Object.values(quantities).reduce((sum, q) => sum + q, 0);\r\n\r\n//   const cartItems = menuData.flatMap(category =>\r\n//     category.items\r\n//       .filter(item => quantities[item['productId']] > 0)\r\n//       .map(item => ({\r\n//         ...item,\r\n//         quantity: quantities[item['productId']],\r\n//         unit: units[item['productId']] || item['Units'], \r\n//         price: units[item['productId']] === item['Units'] \r\n//                 ? item['PriceperUnit'] \r\n//                 : item['PriceperUnits2'],\r\n//         category: category.category\r\n//       }))\r\n//   );\r\n\r\n//   return (\r\n//     <div className=\"bg-gradient-to-b from-[#008000]\">\r\n//       <div className=\"bg-gradient-to-b from-[#008000] to-[#70c656]\">\r\n//         <div className=\"flex justify-between items-center bg-gradient-to-b from-[#008000] to-[#70c656] py-4 px-6\">\r\n//           <h1 className=\"text-2xl font-bold text-white\">Menu</h1>\r\n//           {/* <CsvDataDisplay/> */}\r\n//           <button\r\n//             onClick={() => setIsCartOpen(true)}\r\n//             className=\"relative bg-green-500 text-white p-2 rounded\"\r\n//           >\r\n//             <ShoppingCart size={24} />\r\n//             {totalQuantity > 0 && (\r\n//               <span className=\"absolute top-0 right-0 bg-red-500 text-white rounded-full px-2 text-xs\">\r\n//                 {totalQuantity}\r\n//               </span>\r\n//             )}\r\n//           </button>\r\n//         </div>\r\n//         {/* Main Toggle Switch */}\r\n//         <div className=\"flex justify-center py-2\">\r\n//           <ToggleSwitch\r\n//             isOn={mainToggleOn}\r\n//             onToggle={() => setMainToggleOn(prev => !prev)}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"p-6\">\r\n//         {menuData.map(category => (\r\n//           <MenuCategory\r\n//             key={category.category}\r\n//             category={category.category}\r\n//             items={category.items}\r\n//             checkedItems={checkedItems}\r\n//             units={units}\r\n//             onToggleUnit={toggleUnit}\r\n//             onCheck={handleCheck}\r\n//             mainToggleOn={mainToggleOn} // Pass main toggle state here\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <CartSidebar\r\n//         isOpen={isCartOpen}\r\n//         onClose={() => setIsCartOpen(false)}\r\n//         cartItems={cartItems}\r\n//         numberOfPlates={numberOfPlates} // Pass numberOfPlates here\r\n//         onUpdateQuantity={updateQuantity}\r\n//         onToggleUnit={toggleUnit}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Menu;"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}